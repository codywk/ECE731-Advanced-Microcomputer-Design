// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2016 16:16:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    QuadratureEncoderTop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module QuadratureEncoderTop_vlg_sample_tst(
	A,
	B,
	clk,
	reset,
	sampler_tx
);
input  A;
input  B;
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module QuadratureEncoderTop_vlg_check_tst (
	FwdBck,
	Trvl,
	back,
	encCount,
	forward,
	mid,
	sampler_rx
);
input  FwdBck;
input  Trvl;
input [37:0] back;
input [25:0] encCount;
input [37:0] forward;
input [37:0] mid;
input sampler_rx;

reg  FwdBck_expected;
reg  Trvl_expected;
reg [37:0] back_expected;
reg [25:0] encCount_expected;
reg [37:0] forward_expected;
reg [37:0] mid_expected;

reg  FwdBck_prev;
reg  Trvl_prev;
reg [37:0] back_prev;
reg [25:0] encCount_prev;
reg [37:0] forward_prev;
reg [37:0] mid_prev;

reg  FwdBck_expected_prev;
reg  Trvl_expected_prev;
reg [37:0] back_expected_prev;
reg [25:0] encCount_expected_prev;
reg [37:0] forward_expected_prev;
reg [37:0] mid_expected_prev;

reg  last_FwdBck_exp;
reg  last_Trvl_exp;
reg [37:0] last_back_exp;
reg [25:0] last_encCount_exp;
reg [37:0] last_forward_exp;
reg [37:0] last_mid_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	FwdBck_prev = FwdBck;
	Trvl_prev = Trvl;
	back_prev = back;
	encCount_prev = encCount;
	forward_prev = forward;
	mid_prev = mid;
end

// update expected /o prevs

always @(trigger)
begin
	FwdBck_expected_prev = FwdBck_expected;
	Trvl_expected_prev = Trvl_expected;
	back_expected_prev = back_expected;
	encCount_expected_prev = encCount_expected;
	forward_expected_prev = forward_expected;
	mid_expected_prev = mid_expected;
end



// expected FwdBck
initial
begin
	FwdBck_expected = 1'bX;
end 

// expected Trvl
initial
begin
	Trvl_expected = 1'bX;
end 
// expected encCount[ 25 ]
initial
begin
	encCount_expected[25] = 1'bX;
end 
// expected encCount[ 24 ]
initial
begin
	encCount_expected[24] = 1'bX;
end 
// expected encCount[ 23 ]
initial
begin
	encCount_expected[23] = 1'bX;
end 
// expected encCount[ 22 ]
initial
begin
	encCount_expected[22] = 1'bX;
end 
// expected encCount[ 21 ]
initial
begin
	encCount_expected[21] = 1'bX;
end 
// expected encCount[ 20 ]
initial
begin
	encCount_expected[20] = 1'bX;
end 
// expected encCount[ 19 ]
initial
begin
	encCount_expected[19] = 1'bX;
end 
// expected encCount[ 18 ]
initial
begin
	encCount_expected[18] = 1'bX;
end 
// expected encCount[ 17 ]
initial
begin
	encCount_expected[17] = 1'bX;
end 
// expected encCount[ 16 ]
initial
begin
	encCount_expected[16] = 1'bX;
end 
// expected encCount[ 15 ]
initial
begin
	encCount_expected[15] = 1'bX;
end 
// expected encCount[ 14 ]
initial
begin
	encCount_expected[14] = 1'bX;
end 
// expected encCount[ 13 ]
initial
begin
	encCount_expected[13] = 1'bX;
end 
// expected encCount[ 12 ]
initial
begin
	encCount_expected[12] = 1'bX;
end 
// expected encCount[ 11 ]
initial
begin
	encCount_expected[11] = 1'bX;
end 
// expected encCount[ 10 ]
initial
begin
	encCount_expected[10] = 1'bX;
end 
// expected encCount[ 9 ]
initial
begin
	encCount_expected[9] = 1'bX;
end 
// expected encCount[ 8 ]
initial
begin
	encCount_expected[8] = 1'bX;
end 
// expected encCount[ 7 ]
initial
begin
	encCount_expected[7] = 1'bX;
end 
// expected encCount[ 6 ]
initial
begin
	encCount_expected[6] = 1'bX;
end 
// expected encCount[ 5 ]
initial
begin
	encCount_expected[5] = 1'bX;
end 
// expected encCount[ 4 ]
initial
begin
	encCount_expected[4] = 1'bX;
end 
// expected encCount[ 3 ]
initial
begin
	encCount_expected[3] = 1'bX;
end 
// expected encCount[ 2 ]
initial
begin
	encCount_expected[2] = 1'bX;
end 
// expected encCount[ 1 ]
initial
begin
	encCount_expected[1] = 1'bX;
end 
// expected encCount[ 0 ]
initial
begin
	encCount_expected[0] = 1'bX;
end 
// expected forward[ 37 ]
initial
begin
	forward_expected[37] = 1'bX;
end 
// expected forward[ 36 ]
initial
begin
	forward_expected[36] = 1'bX;
end 
// expected forward[ 35 ]
initial
begin
	forward_expected[35] = 1'bX;
end 
// expected forward[ 34 ]
initial
begin
	forward_expected[34] = 1'bX;
end 
// expected forward[ 33 ]
initial
begin
	forward_expected[33] = 1'bX;
end 
// expected forward[ 32 ]
initial
begin
	forward_expected[32] = 1'bX;
end 
// expected forward[ 31 ]
initial
begin
	forward_expected[31] = 1'bX;
end 
// expected forward[ 30 ]
initial
begin
	forward_expected[30] = 1'bX;
end 
// expected forward[ 29 ]
initial
begin
	forward_expected[29] = 1'bX;
end 
// expected forward[ 28 ]
initial
begin
	forward_expected[28] = 1'bX;
end 
// expected forward[ 27 ]
initial
begin
	forward_expected[27] = 1'bX;
end 
// expected forward[ 26 ]
initial
begin
	forward_expected[26] = 1'bX;
end 
// expected forward[ 25 ]
initial
begin
	forward_expected[25] = 1'bX;
end 
// expected forward[ 24 ]
initial
begin
	forward_expected[24] = 1'bX;
end 
// expected forward[ 23 ]
initial
begin
	forward_expected[23] = 1'bX;
end 
// expected forward[ 22 ]
initial
begin
	forward_expected[22] = 1'bX;
end 
// expected forward[ 21 ]
initial
begin
	forward_expected[21] = 1'bX;
end 
// expected forward[ 20 ]
initial
begin
	forward_expected[20] = 1'bX;
end 
// expected forward[ 19 ]
initial
begin
	forward_expected[19] = 1'bX;
end 
// expected forward[ 18 ]
initial
begin
	forward_expected[18] = 1'bX;
end 
// expected forward[ 17 ]
initial
begin
	forward_expected[17] = 1'bX;
end 
// expected forward[ 16 ]
initial
begin
	forward_expected[16] = 1'bX;
end 
// expected forward[ 15 ]
initial
begin
	forward_expected[15] = 1'bX;
end 
// expected forward[ 14 ]
initial
begin
	forward_expected[14] = 1'bX;
end 
// expected forward[ 13 ]
initial
begin
	forward_expected[13] = 1'bX;
end 
// expected forward[ 12 ]
initial
begin
	forward_expected[12] = 1'bX;
end 
// expected forward[ 11 ]
initial
begin
	forward_expected[11] = 1'bX;
end 
// expected forward[ 10 ]
initial
begin
	forward_expected[10] = 1'bX;
end 
// expected forward[ 9 ]
initial
begin
	forward_expected[9] = 1'bX;
end 
// expected forward[ 8 ]
initial
begin
	forward_expected[8] = 1'bX;
end 
// expected forward[ 7 ]
initial
begin
	forward_expected[7] = 1'bX;
end 
// expected forward[ 6 ]
initial
begin
	forward_expected[6] = 1'bX;
end 
// expected forward[ 5 ]
initial
begin
	forward_expected[5] = 1'bX;
end 
// expected forward[ 4 ]
initial
begin
	forward_expected[4] = 1'bX;
end 
// expected forward[ 3 ]
initial
begin
	forward_expected[3] = 1'bX;
end 
// expected forward[ 2 ]
initial
begin
	forward_expected[2] = 1'bX;
end 
// expected forward[ 1 ]
initial
begin
	forward_expected[1] = 1'bX;
end 
// expected forward[ 0 ]
initial
begin
	forward_expected[0] = 1'bX;
end 
// expected mid[ 37 ]
initial
begin
	mid_expected[37] = 1'bX;
end 
// expected mid[ 36 ]
initial
begin
	mid_expected[36] = 1'bX;
end 
// expected mid[ 35 ]
initial
begin
	mid_expected[35] = 1'bX;
end 
// expected mid[ 34 ]
initial
begin
	mid_expected[34] = 1'bX;
end 
// expected mid[ 33 ]
initial
begin
	mid_expected[33] = 1'bX;
end 
// expected mid[ 32 ]
initial
begin
	mid_expected[32] = 1'bX;
end 
// expected mid[ 31 ]
initial
begin
	mid_expected[31] = 1'bX;
end 
// expected mid[ 30 ]
initial
begin
	mid_expected[30] = 1'bX;
end 
// expected mid[ 29 ]
initial
begin
	mid_expected[29] = 1'bX;
end 
// expected mid[ 28 ]
initial
begin
	mid_expected[28] = 1'bX;
end 
// expected mid[ 27 ]
initial
begin
	mid_expected[27] = 1'bX;
end 
// expected mid[ 26 ]
initial
begin
	mid_expected[26] = 1'bX;
end 
// expected mid[ 25 ]
initial
begin
	mid_expected[25] = 1'bX;
end 
// expected mid[ 24 ]
initial
begin
	mid_expected[24] = 1'bX;
end 
// expected mid[ 23 ]
initial
begin
	mid_expected[23] = 1'bX;
end 
// expected mid[ 22 ]
initial
begin
	mid_expected[22] = 1'bX;
end 
// expected mid[ 21 ]
initial
begin
	mid_expected[21] = 1'bX;
end 
// expected mid[ 20 ]
initial
begin
	mid_expected[20] = 1'bX;
end 
// expected mid[ 19 ]
initial
begin
	mid_expected[19] = 1'bX;
end 
// expected mid[ 18 ]
initial
begin
	mid_expected[18] = 1'bX;
end 
// expected mid[ 17 ]
initial
begin
	mid_expected[17] = 1'bX;
end 
// expected mid[ 16 ]
initial
begin
	mid_expected[16] = 1'bX;
end 
// expected mid[ 15 ]
initial
begin
	mid_expected[15] = 1'bX;
end 
// expected mid[ 14 ]
initial
begin
	mid_expected[14] = 1'bX;
end 
// expected mid[ 13 ]
initial
begin
	mid_expected[13] = 1'bX;
end 
// expected mid[ 12 ]
initial
begin
	mid_expected[12] = 1'bX;
end 
// expected mid[ 11 ]
initial
begin
	mid_expected[11] = 1'bX;
end 
// expected mid[ 10 ]
initial
begin
	mid_expected[10] = 1'bX;
end 
// expected mid[ 9 ]
initial
begin
	mid_expected[9] = 1'bX;
end 
// expected mid[ 8 ]
initial
begin
	mid_expected[8] = 1'bX;
end 
// expected mid[ 7 ]
initial
begin
	mid_expected[7] = 1'bX;
end 
// expected mid[ 6 ]
initial
begin
	mid_expected[6] = 1'bX;
end 
// expected mid[ 5 ]
initial
begin
	mid_expected[5] = 1'bX;
end 
// expected mid[ 4 ]
initial
begin
	mid_expected[4] = 1'bX;
end 
// expected mid[ 3 ]
initial
begin
	mid_expected[3] = 1'bX;
end 
// expected mid[ 2 ]
initial
begin
	mid_expected[2] = 1'bX;
end 
// expected mid[ 1 ]
initial
begin
	mid_expected[1] = 1'bX;
end 
// expected mid[ 0 ]
initial
begin
	mid_expected[0] = 1'bX;
end 
// expected back[ 37 ]
initial
begin
	back_expected[37] = 1'bX;
end 
// expected back[ 36 ]
initial
begin
	back_expected[36] = 1'bX;
end 
// expected back[ 35 ]
initial
begin
	back_expected[35] = 1'bX;
end 
// expected back[ 34 ]
initial
begin
	back_expected[34] = 1'bX;
end 
// expected back[ 33 ]
initial
begin
	back_expected[33] = 1'bX;
end 
// expected back[ 32 ]
initial
begin
	back_expected[32] = 1'bX;
end 
// expected back[ 31 ]
initial
begin
	back_expected[31] = 1'bX;
end 
// expected back[ 30 ]
initial
begin
	back_expected[30] = 1'bX;
end 
// expected back[ 29 ]
initial
begin
	back_expected[29] = 1'bX;
end 
// expected back[ 28 ]
initial
begin
	back_expected[28] = 1'bX;
end 
// expected back[ 27 ]
initial
begin
	back_expected[27] = 1'bX;
end 
// expected back[ 26 ]
initial
begin
	back_expected[26] = 1'bX;
end 
// expected back[ 25 ]
initial
begin
	back_expected[25] = 1'bX;
end 
// expected back[ 24 ]
initial
begin
	back_expected[24] = 1'bX;
end 
// expected back[ 23 ]
initial
begin
	back_expected[23] = 1'bX;
end 
// expected back[ 22 ]
initial
begin
	back_expected[22] = 1'bX;
end 
// expected back[ 21 ]
initial
begin
	back_expected[21] = 1'bX;
end 
// expected back[ 20 ]
initial
begin
	back_expected[20] = 1'bX;
end 
// expected back[ 19 ]
initial
begin
	back_expected[19] = 1'bX;
end 
// expected back[ 18 ]
initial
begin
	back_expected[18] = 1'bX;
end 
// expected back[ 17 ]
initial
begin
	back_expected[17] = 1'bX;
end 
// expected back[ 16 ]
initial
begin
	back_expected[16] = 1'bX;
end 
// expected back[ 15 ]
initial
begin
	back_expected[15] = 1'bX;
end 
// expected back[ 14 ]
initial
begin
	back_expected[14] = 1'bX;
end 
// expected back[ 13 ]
initial
begin
	back_expected[13] = 1'bX;
end 
// expected back[ 12 ]
initial
begin
	back_expected[12] = 1'bX;
end 
// expected back[ 11 ]
initial
begin
	back_expected[11] = 1'bX;
end 
// expected back[ 10 ]
initial
begin
	back_expected[10] = 1'bX;
end 
// expected back[ 9 ]
initial
begin
	back_expected[9] = 1'bX;
end 
// expected back[ 8 ]
initial
begin
	back_expected[8] = 1'bX;
end 
// expected back[ 7 ]
initial
begin
	back_expected[7] = 1'bX;
end 
// expected back[ 6 ]
initial
begin
	back_expected[6] = 1'bX;
end 
// expected back[ 5 ]
initial
begin
	back_expected[5] = 1'bX;
end 
// expected back[ 4 ]
initial
begin
	back_expected[4] = 1'bX;
end 
// expected back[ 3 ]
initial
begin
	back_expected[3] = 1'bX;
end 
// expected back[ 2 ]
initial
begin
	back_expected[2] = 1'bX;
end 
// expected back[ 1 ]
initial
begin
	back_expected[1] = 1'bX;
end 
// expected back[ 0 ]
initial
begin
	back_expected[0] = 1'bX;
end 
// generate trigger
always @(FwdBck_expected or FwdBck or Trvl_expected or Trvl or back_expected or back or encCount_expected or encCount or forward_expected or forward or mid_expected or mid)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FwdBck = %b | expected Trvl = %b | expected back = %b | expected encCount = %b | expected forward = %b | expected mid = %b | ",FwdBck_expected_prev,Trvl_expected_prev,back_expected_prev,encCount_expected_prev,forward_expected_prev,mid_expected_prev);
	$display("| real FwdBck = %b | real Trvl = %b | real back = %b | real encCount = %b | real forward = %b | real mid = %b | ",FwdBck_prev,Trvl_prev,back_prev,encCount_prev,forward_prev,mid_prev);
`endif
	if (
		( FwdBck_expected_prev !== 1'bx ) && ( FwdBck_prev !== FwdBck_expected_prev )
		&& ((FwdBck_expected_prev !== last_FwdBck_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FwdBck :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FwdBck_expected_prev);
		$display ("     Real value = %b", FwdBck_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FwdBck_exp = FwdBck_expected_prev;
	end
	if (
		( Trvl_expected_prev !== 1'bx ) && ( Trvl_prev !== Trvl_expected_prev )
		&& ((Trvl_expected_prev !== last_Trvl_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Trvl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Trvl_expected_prev);
		$display ("     Real value = %b", Trvl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Trvl_exp = Trvl_expected_prev;
	end
	if (
		( back_expected_prev[0] !== 1'bx ) && ( back_prev[0] !== back_expected_prev[0] )
		&& ((back_expected_prev[0] !== last_back_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[0] = back_expected_prev[0];
	end
	if (
		( back_expected_prev[1] !== 1'bx ) && ( back_prev[1] !== back_expected_prev[1] )
		&& ((back_expected_prev[1] !== last_back_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[1] = back_expected_prev[1];
	end
	if (
		( back_expected_prev[2] !== 1'bx ) && ( back_prev[2] !== back_expected_prev[2] )
		&& ((back_expected_prev[2] !== last_back_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[2] = back_expected_prev[2];
	end
	if (
		( back_expected_prev[3] !== 1'bx ) && ( back_prev[3] !== back_expected_prev[3] )
		&& ((back_expected_prev[3] !== last_back_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[3] = back_expected_prev[3];
	end
	if (
		( back_expected_prev[4] !== 1'bx ) && ( back_prev[4] !== back_expected_prev[4] )
		&& ((back_expected_prev[4] !== last_back_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[4] = back_expected_prev[4];
	end
	if (
		( back_expected_prev[5] !== 1'bx ) && ( back_prev[5] !== back_expected_prev[5] )
		&& ((back_expected_prev[5] !== last_back_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[5] = back_expected_prev[5];
	end
	if (
		( back_expected_prev[6] !== 1'bx ) && ( back_prev[6] !== back_expected_prev[6] )
		&& ((back_expected_prev[6] !== last_back_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[6] = back_expected_prev[6];
	end
	if (
		( back_expected_prev[7] !== 1'bx ) && ( back_prev[7] !== back_expected_prev[7] )
		&& ((back_expected_prev[7] !== last_back_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[7] = back_expected_prev[7];
	end
	if (
		( back_expected_prev[8] !== 1'bx ) && ( back_prev[8] !== back_expected_prev[8] )
		&& ((back_expected_prev[8] !== last_back_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[8] = back_expected_prev[8];
	end
	if (
		( back_expected_prev[9] !== 1'bx ) && ( back_prev[9] !== back_expected_prev[9] )
		&& ((back_expected_prev[9] !== last_back_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[9] = back_expected_prev[9];
	end
	if (
		( back_expected_prev[10] !== 1'bx ) && ( back_prev[10] !== back_expected_prev[10] )
		&& ((back_expected_prev[10] !== last_back_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[10] = back_expected_prev[10];
	end
	if (
		( back_expected_prev[11] !== 1'bx ) && ( back_prev[11] !== back_expected_prev[11] )
		&& ((back_expected_prev[11] !== last_back_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[11] = back_expected_prev[11];
	end
	if (
		( back_expected_prev[12] !== 1'bx ) && ( back_prev[12] !== back_expected_prev[12] )
		&& ((back_expected_prev[12] !== last_back_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[12] = back_expected_prev[12];
	end
	if (
		( back_expected_prev[13] !== 1'bx ) && ( back_prev[13] !== back_expected_prev[13] )
		&& ((back_expected_prev[13] !== last_back_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[13] = back_expected_prev[13];
	end
	if (
		( back_expected_prev[14] !== 1'bx ) && ( back_prev[14] !== back_expected_prev[14] )
		&& ((back_expected_prev[14] !== last_back_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[14] = back_expected_prev[14];
	end
	if (
		( back_expected_prev[15] !== 1'bx ) && ( back_prev[15] !== back_expected_prev[15] )
		&& ((back_expected_prev[15] !== last_back_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[15] = back_expected_prev[15];
	end
	if (
		( back_expected_prev[16] !== 1'bx ) && ( back_prev[16] !== back_expected_prev[16] )
		&& ((back_expected_prev[16] !== last_back_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[16] = back_expected_prev[16];
	end
	if (
		( back_expected_prev[17] !== 1'bx ) && ( back_prev[17] !== back_expected_prev[17] )
		&& ((back_expected_prev[17] !== last_back_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[17] = back_expected_prev[17];
	end
	if (
		( back_expected_prev[18] !== 1'bx ) && ( back_prev[18] !== back_expected_prev[18] )
		&& ((back_expected_prev[18] !== last_back_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[18] = back_expected_prev[18];
	end
	if (
		( back_expected_prev[19] !== 1'bx ) && ( back_prev[19] !== back_expected_prev[19] )
		&& ((back_expected_prev[19] !== last_back_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[19] = back_expected_prev[19];
	end
	if (
		( back_expected_prev[20] !== 1'bx ) && ( back_prev[20] !== back_expected_prev[20] )
		&& ((back_expected_prev[20] !== last_back_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[20] = back_expected_prev[20];
	end
	if (
		( back_expected_prev[21] !== 1'bx ) && ( back_prev[21] !== back_expected_prev[21] )
		&& ((back_expected_prev[21] !== last_back_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[21] = back_expected_prev[21];
	end
	if (
		( back_expected_prev[22] !== 1'bx ) && ( back_prev[22] !== back_expected_prev[22] )
		&& ((back_expected_prev[22] !== last_back_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[22] = back_expected_prev[22];
	end
	if (
		( back_expected_prev[23] !== 1'bx ) && ( back_prev[23] !== back_expected_prev[23] )
		&& ((back_expected_prev[23] !== last_back_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[23] = back_expected_prev[23];
	end
	if (
		( back_expected_prev[24] !== 1'bx ) && ( back_prev[24] !== back_expected_prev[24] )
		&& ((back_expected_prev[24] !== last_back_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[24] = back_expected_prev[24];
	end
	if (
		( back_expected_prev[25] !== 1'bx ) && ( back_prev[25] !== back_expected_prev[25] )
		&& ((back_expected_prev[25] !== last_back_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[25] = back_expected_prev[25];
	end
	if (
		( back_expected_prev[26] !== 1'bx ) && ( back_prev[26] !== back_expected_prev[26] )
		&& ((back_expected_prev[26] !== last_back_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[26] = back_expected_prev[26];
	end
	if (
		( back_expected_prev[27] !== 1'bx ) && ( back_prev[27] !== back_expected_prev[27] )
		&& ((back_expected_prev[27] !== last_back_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[27] = back_expected_prev[27];
	end
	if (
		( back_expected_prev[28] !== 1'bx ) && ( back_prev[28] !== back_expected_prev[28] )
		&& ((back_expected_prev[28] !== last_back_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[28] = back_expected_prev[28];
	end
	if (
		( back_expected_prev[29] !== 1'bx ) && ( back_prev[29] !== back_expected_prev[29] )
		&& ((back_expected_prev[29] !== last_back_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[29] = back_expected_prev[29];
	end
	if (
		( back_expected_prev[30] !== 1'bx ) && ( back_prev[30] !== back_expected_prev[30] )
		&& ((back_expected_prev[30] !== last_back_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[30] = back_expected_prev[30];
	end
	if (
		( back_expected_prev[31] !== 1'bx ) && ( back_prev[31] !== back_expected_prev[31] )
		&& ((back_expected_prev[31] !== last_back_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[31] = back_expected_prev[31];
	end
	if (
		( back_expected_prev[32] !== 1'bx ) && ( back_prev[32] !== back_expected_prev[32] )
		&& ((back_expected_prev[32] !== last_back_exp[32]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[32] = back_expected_prev[32];
	end
	if (
		( back_expected_prev[33] !== 1'bx ) && ( back_prev[33] !== back_expected_prev[33] )
		&& ((back_expected_prev[33] !== last_back_exp[33]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[33] = back_expected_prev[33];
	end
	if (
		( back_expected_prev[34] !== 1'bx ) && ( back_prev[34] !== back_expected_prev[34] )
		&& ((back_expected_prev[34] !== last_back_exp[34]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[34] = back_expected_prev[34];
	end
	if (
		( back_expected_prev[35] !== 1'bx ) && ( back_prev[35] !== back_expected_prev[35] )
		&& ((back_expected_prev[35] !== last_back_exp[35]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[35] = back_expected_prev[35];
	end
	if (
		( back_expected_prev[36] !== 1'bx ) && ( back_prev[36] !== back_expected_prev[36] )
		&& ((back_expected_prev[36] !== last_back_exp[36]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[36] = back_expected_prev[36];
	end
	if (
		( back_expected_prev[37] !== 1'bx ) && ( back_prev[37] !== back_expected_prev[37] )
		&& ((back_expected_prev[37] !== last_back_exp[37]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port back[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", back_expected_prev);
		$display ("     Real value = %b", back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_back_exp[37] = back_expected_prev[37];
	end
	if (
		( encCount_expected_prev[0] !== 1'bx ) && ( encCount_prev[0] !== encCount_expected_prev[0] )
		&& ((encCount_expected_prev[0] !== last_encCount_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[0] = encCount_expected_prev[0];
	end
	if (
		( encCount_expected_prev[1] !== 1'bx ) && ( encCount_prev[1] !== encCount_expected_prev[1] )
		&& ((encCount_expected_prev[1] !== last_encCount_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[1] = encCount_expected_prev[1];
	end
	if (
		( encCount_expected_prev[2] !== 1'bx ) && ( encCount_prev[2] !== encCount_expected_prev[2] )
		&& ((encCount_expected_prev[2] !== last_encCount_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[2] = encCount_expected_prev[2];
	end
	if (
		( encCount_expected_prev[3] !== 1'bx ) && ( encCount_prev[3] !== encCount_expected_prev[3] )
		&& ((encCount_expected_prev[3] !== last_encCount_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[3] = encCount_expected_prev[3];
	end
	if (
		( encCount_expected_prev[4] !== 1'bx ) && ( encCount_prev[4] !== encCount_expected_prev[4] )
		&& ((encCount_expected_prev[4] !== last_encCount_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[4] = encCount_expected_prev[4];
	end
	if (
		( encCount_expected_prev[5] !== 1'bx ) && ( encCount_prev[5] !== encCount_expected_prev[5] )
		&& ((encCount_expected_prev[5] !== last_encCount_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[5] = encCount_expected_prev[5];
	end
	if (
		( encCount_expected_prev[6] !== 1'bx ) && ( encCount_prev[6] !== encCount_expected_prev[6] )
		&& ((encCount_expected_prev[6] !== last_encCount_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[6] = encCount_expected_prev[6];
	end
	if (
		( encCount_expected_prev[7] !== 1'bx ) && ( encCount_prev[7] !== encCount_expected_prev[7] )
		&& ((encCount_expected_prev[7] !== last_encCount_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[7] = encCount_expected_prev[7];
	end
	if (
		( encCount_expected_prev[8] !== 1'bx ) && ( encCount_prev[8] !== encCount_expected_prev[8] )
		&& ((encCount_expected_prev[8] !== last_encCount_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[8] = encCount_expected_prev[8];
	end
	if (
		( encCount_expected_prev[9] !== 1'bx ) && ( encCount_prev[9] !== encCount_expected_prev[9] )
		&& ((encCount_expected_prev[9] !== last_encCount_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[9] = encCount_expected_prev[9];
	end
	if (
		( encCount_expected_prev[10] !== 1'bx ) && ( encCount_prev[10] !== encCount_expected_prev[10] )
		&& ((encCount_expected_prev[10] !== last_encCount_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[10] = encCount_expected_prev[10];
	end
	if (
		( encCount_expected_prev[11] !== 1'bx ) && ( encCount_prev[11] !== encCount_expected_prev[11] )
		&& ((encCount_expected_prev[11] !== last_encCount_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[11] = encCount_expected_prev[11];
	end
	if (
		( encCount_expected_prev[12] !== 1'bx ) && ( encCount_prev[12] !== encCount_expected_prev[12] )
		&& ((encCount_expected_prev[12] !== last_encCount_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[12] = encCount_expected_prev[12];
	end
	if (
		( encCount_expected_prev[13] !== 1'bx ) && ( encCount_prev[13] !== encCount_expected_prev[13] )
		&& ((encCount_expected_prev[13] !== last_encCount_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[13] = encCount_expected_prev[13];
	end
	if (
		( encCount_expected_prev[14] !== 1'bx ) && ( encCount_prev[14] !== encCount_expected_prev[14] )
		&& ((encCount_expected_prev[14] !== last_encCount_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[14] = encCount_expected_prev[14];
	end
	if (
		( encCount_expected_prev[15] !== 1'bx ) && ( encCount_prev[15] !== encCount_expected_prev[15] )
		&& ((encCount_expected_prev[15] !== last_encCount_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[15] = encCount_expected_prev[15];
	end
	if (
		( encCount_expected_prev[16] !== 1'bx ) && ( encCount_prev[16] !== encCount_expected_prev[16] )
		&& ((encCount_expected_prev[16] !== last_encCount_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[16] = encCount_expected_prev[16];
	end
	if (
		( encCount_expected_prev[17] !== 1'bx ) && ( encCount_prev[17] !== encCount_expected_prev[17] )
		&& ((encCount_expected_prev[17] !== last_encCount_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[17] = encCount_expected_prev[17];
	end
	if (
		( encCount_expected_prev[18] !== 1'bx ) && ( encCount_prev[18] !== encCount_expected_prev[18] )
		&& ((encCount_expected_prev[18] !== last_encCount_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[18] = encCount_expected_prev[18];
	end
	if (
		( encCount_expected_prev[19] !== 1'bx ) && ( encCount_prev[19] !== encCount_expected_prev[19] )
		&& ((encCount_expected_prev[19] !== last_encCount_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[19] = encCount_expected_prev[19];
	end
	if (
		( encCount_expected_prev[20] !== 1'bx ) && ( encCount_prev[20] !== encCount_expected_prev[20] )
		&& ((encCount_expected_prev[20] !== last_encCount_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[20] = encCount_expected_prev[20];
	end
	if (
		( encCount_expected_prev[21] !== 1'bx ) && ( encCount_prev[21] !== encCount_expected_prev[21] )
		&& ((encCount_expected_prev[21] !== last_encCount_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[21] = encCount_expected_prev[21];
	end
	if (
		( encCount_expected_prev[22] !== 1'bx ) && ( encCount_prev[22] !== encCount_expected_prev[22] )
		&& ((encCount_expected_prev[22] !== last_encCount_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[22] = encCount_expected_prev[22];
	end
	if (
		( encCount_expected_prev[23] !== 1'bx ) && ( encCount_prev[23] !== encCount_expected_prev[23] )
		&& ((encCount_expected_prev[23] !== last_encCount_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[23] = encCount_expected_prev[23];
	end
	if (
		( encCount_expected_prev[24] !== 1'bx ) && ( encCount_prev[24] !== encCount_expected_prev[24] )
		&& ((encCount_expected_prev[24] !== last_encCount_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[24] = encCount_expected_prev[24];
	end
	if (
		( encCount_expected_prev[25] !== 1'bx ) && ( encCount_prev[25] !== encCount_expected_prev[25] )
		&& ((encCount_expected_prev[25] !== last_encCount_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port encCount[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", encCount_expected_prev);
		$display ("     Real value = %b", encCount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_encCount_exp[25] = encCount_expected_prev[25];
	end
	if (
		( forward_expected_prev[0] !== 1'bx ) && ( forward_prev[0] !== forward_expected_prev[0] )
		&& ((forward_expected_prev[0] !== last_forward_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[0] = forward_expected_prev[0];
	end
	if (
		( forward_expected_prev[1] !== 1'bx ) && ( forward_prev[1] !== forward_expected_prev[1] )
		&& ((forward_expected_prev[1] !== last_forward_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[1] = forward_expected_prev[1];
	end
	if (
		( forward_expected_prev[2] !== 1'bx ) && ( forward_prev[2] !== forward_expected_prev[2] )
		&& ((forward_expected_prev[2] !== last_forward_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[2] = forward_expected_prev[2];
	end
	if (
		( forward_expected_prev[3] !== 1'bx ) && ( forward_prev[3] !== forward_expected_prev[3] )
		&& ((forward_expected_prev[3] !== last_forward_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[3] = forward_expected_prev[3];
	end
	if (
		( forward_expected_prev[4] !== 1'bx ) && ( forward_prev[4] !== forward_expected_prev[4] )
		&& ((forward_expected_prev[4] !== last_forward_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[4] = forward_expected_prev[4];
	end
	if (
		( forward_expected_prev[5] !== 1'bx ) && ( forward_prev[5] !== forward_expected_prev[5] )
		&& ((forward_expected_prev[5] !== last_forward_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[5] = forward_expected_prev[5];
	end
	if (
		( forward_expected_prev[6] !== 1'bx ) && ( forward_prev[6] !== forward_expected_prev[6] )
		&& ((forward_expected_prev[6] !== last_forward_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[6] = forward_expected_prev[6];
	end
	if (
		( forward_expected_prev[7] !== 1'bx ) && ( forward_prev[7] !== forward_expected_prev[7] )
		&& ((forward_expected_prev[7] !== last_forward_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[7] = forward_expected_prev[7];
	end
	if (
		( forward_expected_prev[8] !== 1'bx ) && ( forward_prev[8] !== forward_expected_prev[8] )
		&& ((forward_expected_prev[8] !== last_forward_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[8] = forward_expected_prev[8];
	end
	if (
		( forward_expected_prev[9] !== 1'bx ) && ( forward_prev[9] !== forward_expected_prev[9] )
		&& ((forward_expected_prev[9] !== last_forward_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[9] = forward_expected_prev[9];
	end
	if (
		( forward_expected_prev[10] !== 1'bx ) && ( forward_prev[10] !== forward_expected_prev[10] )
		&& ((forward_expected_prev[10] !== last_forward_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[10] = forward_expected_prev[10];
	end
	if (
		( forward_expected_prev[11] !== 1'bx ) && ( forward_prev[11] !== forward_expected_prev[11] )
		&& ((forward_expected_prev[11] !== last_forward_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[11] = forward_expected_prev[11];
	end
	if (
		( forward_expected_prev[12] !== 1'bx ) && ( forward_prev[12] !== forward_expected_prev[12] )
		&& ((forward_expected_prev[12] !== last_forward_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[12] = forward_expected_prev[12];
	end
	if (
		( forward_expected_prev[13] !== 1'bx ) && ( forward_prev[13] !== forward_expected_prev[13] )
		&& ((forward_expected_prev[13] !== last_forward_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[13] = forward_expected_prev[13];
	end
	if (
		( forward_expected_prev[14] !== 1'bx ) && ( forward_prev[14] !== forward_expected_prev[14] )
		&& ((forward_expected_prev[14] !== last_forward_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[14] = forward_expected_prev[14];
	end
	if (
		( forward_expected_prev[15] !== 1'bx ) && ( forward_prev[15] !== forward_expected_prev[15] )
		&& ((forward_expected_prev[15] !== last_forward_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[15] = forward_expected_prev[15];
	end
	if (
		( forward_expected_prev[16] !== 1'bx ) && ( forward_prev[16] !== forward_expected_prev[16] )
		&& ((forward_expected_prev[16] !== last_forward_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[16] = forward_expected_prev[16];
	end
	if (
		( forward_expected_prev[17] !== 1'bx ) && ( forward_prev[17] !== forward_expected_prev[17] )
		&& ((forward_expected_prev[17] !== last_forward_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[17] = forward_expected_prev[17];
	end
	if (
		( forward_expected_prev[18] !== 1'bx ) && ( forward_prev[18] !== forward_expected_prev[18] )
		&& ((forward_expected_prev[18] !== last_forward_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[18] = forward_expected_prev[18];
	end
	if (
		( forward_expected_prev[19] !== 1'bx ) && ( forward_prev[19] !== forward_expected_prev[19] )
		&& ((forward_expected_prev[19] !== last_forward_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[19] = forward_expected_prev[19];
	end
	if (
		( forward_expected_prev[20] !== 1'bx ) && ( forward_prev[20] !== forward_expected_prev[20] )
		&& ((forward_expected_prev[20] !== last_forward_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[20] = forward_expected_prev[20];
	end
	if (
		( forward_expected_prev[21] !== 1'bx ) && ( forward_prev[21] !== forward_expected_prev[21] )
		&& ((forward_expected_prev[21] !== last_forward_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[21] = forward_expected_prev[21];
	end
	if (
		( forward_expected_prev[22] !== 1'bx ) && ( forward_prev[22] !== forward_expected_prev[22] )
		&& ((forward_expected_prev[22] !== last_forward_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[22] = forward_expected_prev[22];
	end
	if (
		( forward_expected_prev[23] !== 1'bx ) && ( forward_prev[23] !== forward_expected_prev[23] )
		&& ((forward_expected_prev[23] !== last_forward_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[23] = forward_expected_prev[23];
	end
	if (
		( forward_expected_prev[24] !== 1'bx ) && ( forward_prev[24] !== forward_expected_prev[24] )
		&& ((forward_expected_prev[24] !== last_forward_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[24] = forward_expected_prev[24];
	end
	if (
		( forward_expected_prev[25] !== 1'bx ) && ( forward_prev[25] !== forward_expected_prev[25] )
		&& ((forward_expected_prev[25] !== last_forward_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[25] = forward_expected_prev[25];
	end
	if (
		( forward_expected_prev[26] !== 1'bx ) && ( forward_prev[26] !== forward_expected_prev[26] )
		&& ((forward_expected_prev[26] !== last_forward_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[26] = forward_expected_prev[26];
	end
	if (
		( forward_expected_prev[27] !== 1'bx ) && ( forward_prev[27] !== forward_expected_prev[27] )
		&& ((forward_expected_prev[27] !== last_forward_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[27] = forward_expected_prev[27];
	end
	if (
		( forward_expected_prev[28] !== 1'bx ) && ( forward_prev[28] !== forward_expected_prev[28] )
		&& ((forward_expected_prev[28] !== last_forward_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[28] = forward_expected_prev[28];
	end
	if (
		( forward_expected_prev[29] !== 1'bx ) && ( forward_prev[29] !== forward_expected_prev[29] )
		&& ((forward_expected_prev[29] !== last_forward_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[29] = forward_expected_prev[29];
	end
	if (
		( forward_expected_prev[30] !== 1'bx ) && ( forward_prev[30] !== forward_expected_prev[30] )
		&& ((forward_expected_prev[30] !== last_forward_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[30] = forward_expected_prev[30];
	end
	if (
		( forward_expected_prev[31] !== 1'bx ) && ( forward_prev[31] !== forward_expected_prev[31] )
		&& ((forward_expected_prev[31] !== last_forward_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[31] = forward_expected_prev[31];
	end
	if (
		( forward_expected_prev[32] !== 1'bx ) && ( forward_prev[32] !== forward_expected_prev[32] )
		&& ((forward_expected_prev[32] !== last_forward_exp[32]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[32] = forward_expected_prev[32];
	end
	if (
		( forward_expected_prev[33] !== 1'bx ) && ( forward_prev[33] !== forward_expected_prev[33] )
		&& ((forward_expected_prev[33] !== last_forward_exp[33]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[33] = forward_expected_prev[33];
	end
	if (
		( forward_expected_prev[34] !== 1'bx ) && ( forward_prev[34] !== forward_expected_prev[34] )
		&& ((forward_expected_prev[34] !== last_forward_exp[34]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[34] = forward_expected_prev[34];
	end
	if (
		( forward_expected_prev[35] !== 1'bx ) && ( forward_prev[35] !== forward_expected_prev[35] )
		&& ((forward_expected_prev[35] !== last_forward_exp[35]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[35] = forward_expected_prev[35];
	end
	if (
		( forward_expected_prev[36] !== 1'bx ) && ( forward_prev[36] !== forward_expected_prev[36] )
		&& ((forward_expected_prev[36] !== last_forward_exp[36]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[36] = forward_expected_prev[36];
	end
	if (
		( forward_expected_prev[37] !== 1'bx ) && ( forward_prev[37] !== forward_expected_prev[37] )
		&& ((forward_expected_prev[37] !== last_forward_exp[37]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port forward[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", forward_expected_prev);
		$display ("     Real value = %b", forward_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_forward_exp[37] = forward_expected_prev[37];
	end
	if (
		( mid_expected_prev[0] !== 1'bx ) && ( mid_prev[0] !== mid_expected_prev[0] )
		&& ((mid_expected_prev[0] !== last_mid_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[0] = mid_expected_prev[0];
	end
	if (
		( mid_expected_prev[1] !== 1'bx ) && ( mid_prev[1] !== mid_expected_prev[1] )
		&& ((mid_expected_prev[1] !== last_mid_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[1] = mid_expected_prev[1];
	end
	if (
		( mid_expected_prev[2] !== 1'bx ) && ( mid_prev[2] !== mid_expected_prev[2] )
		&& ((mid_expected_prev[2] !== last_mid_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[2] = mid_expected_prev[2];
	end
	if (
		( mid_expected_prev[3] !== 1'bx ) && ( mid_prev[3] !== mid_expected_prev[3] )
		&& ((mid_expected_prev[3] !== last_mid_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[3] = mid_expected_prev[3];
	end
	if (
		( mid_expected_prev[4] !== 1'bx ) && ( mid_prev[4] !== mid_expected_prev[4] )
		&& ((mid_expected_prev[4] !== last_mid_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[4] = mid_expected_prev[4];
	end
	if (
		( mid_expected_prev[5] !== 1'bx ) && ( mid_prev[5] !== mid_expected_prev[5] )
		&& ((mid_expected_prev[5] !== last_mid_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[5] = mid_expected_prev[5];
	end
	if (
		( mid_expected_prev[6] !== 1'bx ) && ( mid_prev[6] !== mid_expected_prev[6] )
		&& ((mid_expected_prev[6] !== last_mid_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[6] = mid_expected_prev[6];
	end
	if (
		( mid_expected_prev[7] !== 1'bx ) && ( mid_prev[7] !== mid_expected_prev[7] )
		&& ((mid_expected_prev[7] !== last_mid_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[7] = mid_expected_prev[7];
	end
	if (
		( mid_expected_prev[8] !== 1'bx ) && ( mid_prev[8] !== mid_expected_prev[8] )
		&& ((mid_expected_prev[8] !== last_mid_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[8] = mid_expected_prev[8];
	end
	if (
		( mid_expected_prev[9] !== 1'bx ) && ( mid_prev[9] !== mid_expected_prev[9] )
		&& ((mid_expected_prev[9] !== last_mid_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[9] = mid_expected_prev[9];
	end
	if (
		( mid_expected_prev[10] !== 1'bx ) && ( mid_prev[10] !== mid_expected_prev[10] )
		&& ((mid_expected_prev[10] !== last_mid_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[10] = mid_expected_prev[10];
	end
	if (
		( mid_expected_prev[11] !== 1'bx ) && ( mid_prev[11] !== mid_expected_prev[11] )
		&& ((mid_expected_prev[11] !== last_mid_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[11] = mid_expected_prev[11];
	end
	if (
		( mid_expected_prev[12] !== 1'bx ) && ( mid_prev[12] !== mid_expected_prev[12] )
		&& ((mid_expected_prev[12] !== last_mid_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[12] = mid_expected_prev[12];
	end
	if (
		( mid_expected_prev[13] !== 1'bx ) && ( mid_prev[13] !== mid_expected_prev[13] )
		&& ((mid_expected_prev[13] !== last_mid_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[13] = mid_expected_prev[13];
	end
	if (
		( mid_expected_prev[14] !== 1'bx ) && ( mid_prev[14] !== mid_expected_prev[14] )
		&& ((mid_expected_prev[14] !== last_mid_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[14] = mid_expected_prev[14];
	end
	if (
		( mid_expected_prev[15] !== 1'bx ) && ( mid_prev[15] !== mid_expected_prev[15] )
		&& ((mid_expected_prev[15] !== last_mid_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[15] = mid_expected_prev[15];
	end
	if (
		( mid_expected_prev[16] !== 1'bx ) && ( mid_prev[16] !== mid_expected_prev[16] )
		&& ((mid_expected_prev[16] !== last_mid_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[16] = mid_expected_prev[16];
	end
	if (
		( mid_expected_prev[17] !== 1'bx ) && ( mid_prev[17] !== mid_expected_prev[17] )
		&& ((mid_expected_prev[17] !== last_mid_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[17] = mid_expected_prev[17];
	end
	if (
		( mid_expected_prev[18] !== 1'bx ) && ( mid_prev[18] !== mid_expected_prev[18] )
		&& ((mid_expected_prev[18] !== last_mid_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[18] = mid_expected_prev[18];
	end
	if (
		( mid_expected_prev[19] !== 1'bx ) && ( mid_prev[19] !== mid_expected_prev[19] )
		&& ((mid_expected_prev[19] !== last_mid_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[19] = mid_expected_prev[19];
	end
	if (
		( mid_expected_prev[20] !== 1'bx ) && ( mid_prev[20] !== mid_expected_prev[20] )
		&& ((mid_expected_prev[20] !== last_mid_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[20] = mid_expected_prev[20];
	end
	if (
		( mid_expected_prev[21] !== 1'bx ) && ( mid_prev[21] !== mid_expected_prev[21] )
		&& ((mid_expected_prev[21] !== last_mid_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[21] = mid_expected_prev[21];
	end
	if (
		( mid_expected_prev[22] !== 1'bx ) && ( mid_prev[22] !== mid_expected_prev[22] )
		&& ((mid_expected_prev[22] !== last_mid_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[22] = mid_expected_prev[22];
	end
	if (
		( mid_expected_prev[23] !== 1'bx ) && ( mid_prev[23] !== mid_expected_prev[23] )
		&& ((mid_expected_prev[23] !== last_mid_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[23] = mid_expected_prev[23];
	end
	if (
		( mid_expected_prev[24] !== 1'bx ) && ( mid_prev[24] !== mid_expected_prev[24] )
		&& ((mid_expected_prev[24] !== last_mid_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[24] = mid_expected_prev[24];
	end
	if (
		( mid_expected_prev[25] !== 1'bx ) && ( mid_prev[25] !== mid_expected_prev[25] )
		&& ((mid_expected_prev[25] !== last_mid_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[25] = mid_expected_prev[25];
	end
	if (
		( mid_expected_prev[26] !== 1'bx ) && ( mid_prev[26] !== mid_expected_prev[26] )
		&& ((mid_expected_prev[26] !== last_mid_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[26] = mid_expected_prev[26];
	end
	if (
		( mid_expected_prev[27] !== 1'bx ) && ( mid_prev[27] !== mid_expected_prev[27] )
		&& ((mid_expected_prev[27] !== last_mid_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[27] = mid_expected_prev[27];
	end
	if (
		( mid_expected_prev[28] !== 1'bx ) && ( mid_prev[28] !== mid_expected_prev[28] )
		&& ((mid_expected_prev[28] !== last_mid_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[28] = mid_expected_prev[28];
	end
	if (
		( mid_expected_prev[29] !== 1'bx ) && ( mid_prev[29] !== mid_expected_prev[29] )
		&& ((mid_expected_prev[29] !== last_mid_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[29] = mid_expected_prev[29];
	end
	if (
		( mid_expected_prev[30] !== 1'bx ) && ( mid_prev[30] !== mid_expected_prev[30] )
		&& ((mid_expected_prev[30] !== last_mid_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[30] = mid_expected_prev[30];
	end
	if (
		( mid_expected_prev[31] !== 1'bx ) && ( mid_prev[31] !== mid_expected_prev[31] )
		&& ((mid_expected_prev[31] !== last_mid_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[31] = mid_expected_prev[31];
	end
	if (
		( mid_expected_prev[32] !== 1'bx ) && ( mid_prev[32] !== mid_expected_prev[32] )
		&& ((mid_expected_prev[32] !== last_mid_exp[32]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[32] = mid_expected_prev[32];
	end
	if (
		( mid_expected_prev[33] !== 1'bx ) && ( mid_prev[33] !== mid_expected_prev[33] )
		&& ((mid_expected_prev[33] !== last_mid_exp[33]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[33] = mid_expected_prev[33];
	end
	if (
		( mid_expected_prev[34] !== 1'bx ) && ( mid_prev[34] !== mid_expected_prev[34] )
		&& ((mid_expected_prev[34] !== last_mid_exp[34]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[34] = mid_expected_prev[34];
	end
	if (
		( mid_expected_prev[35] !== 1'bx ) && ( mid_prev[35] !== mid_expected_prev[35] )
		&& ((mid_expected_prev[35] !== last_mid_exp[35]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[35] = mid_expected_prev[35];
	end
	if (
		( mid_expected_prev[36] !== 1'bx ) && ( mid_prev[36] !== mid_expected_prev[36] )
		&& ((mid_expected_prev[36] !== last_mid_exp[36]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[36] = mid_expected_prev[36];
	end
	if (
		( mid_expected_prev[37] !== 1'bx ) && ( mid_prev[37] !== mid_expected_prev[37] )
		&& ((mid_expected_prev[37] !== last_mid_exp[37]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mid[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mid_expected_prev);
		$display ("     Real value = %b", mid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mid_exp[37] = mid_expected_prev[37];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module QuadratureEncoderTop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg clk;
reg reset;
// wires                                               
wire FwdBck;
wire Trvl;
wire [37:0] back;
wire [25:0] encCount;
wire [37:0] forward;
wire [37:0] mid;

wire sampler;                             

// assign statements (if any)                          
QuadratureEncoderTop i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.FwdBck(FwdBck),
	.Trvl(Trvl),
	.back(back),
	.clk(clk),
	.encCount(encCount),
	.forward(forward),
	.mid(mid),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #20000 1'b1;
end 

// A
initial
begin
	repeat(3)
	begin
		A = 1'b0;
		A = #50000 1'b1;
		# 50000;
	end
	A = 1'b0;
	A = #690000 1'b1;
end 

// B
initial
begin
	B = 1'b1;
	# 25000;
	repeat(3)
	begin
		B = 1'b0;
		B = #50000 1'b1;
		# 50000;
	end
	B = 1'b0;
	B = #665000 1'b1;
end 

QuadratureEncoderTop_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

QuadratureEncoderTop_vlg_check_tst tb_out(
	.FwdBck(FwdBck),
	.Trvl(Trvl),
	.back(back),
	.encCount(encCount),
	.forward(forward),
	.mid(mid),
	.sampler_rx(sampler)
);
endmodule

