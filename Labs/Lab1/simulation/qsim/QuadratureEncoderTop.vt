// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/10/2016 10:55:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    QuadratureEncoderTop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module QuadratureEncoderTop_vlg_sample_tst(
	A,
	B,
	clk,
	reset,
	sampler_tx
);
input  A;
input  B;
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module QuadratureEncoderTop_vlg_check_tst (
	FwdBck,
	Trvl,
	display,
	encCount,
	inches,
	sampler_rx
);
input  FwdBck;
input  Trvl;
input [20:0] display;
input [25:0] encCount;
input [11:0] inches;
input sampler_rx;

reg  FwdBck_expected;
reg  Trvl_expected;
reg [20:0] display_expected;
reg [25:0] encCount_expected;
reg [11:0] inches_expected;

reg  FwdBck_prev;
reg  Trvl_prev;
reg [20:0] display_prev;
reg [25:0] encCount_prev;
reg [11:0] inches_prev;

reg  FwdBck_expected_prev;
reg  Trvl_expected_prev;
reg [20:0] display_expected_prev;
reg [11:0] inches_expected_prev;

reg  last_FwdBck_exp;
reg  last_Trvl_exp;
reg [20:0] last_display_exp;
reg [11:0] last_inches_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	FwdBck_prev = FwdBck;
	Trvl_prev = Trvl;
	display_prev = display;
	encCount_prev = encCount;
	inches_prev = inches;
end

// update expected /o prevs

always @(trigger)
begin
	FwdBck_expected_prev = FwdBck_expected;
	Trvl_expected_prev = Trvl_expected;
	display_expected_prev = display_expected;
	inches_expected_prev = inches_expected;
end



// expected FwdBck
initial
begin
	FwdBck_expected = 1'bX;
	FwdBck_expected = #999000 1'b0;
	FwdBck_expected = #2461000 1'bX;
	FwdBck_expected = #30000 1'b0;
end 

// expected Trvl
initial
begin
	Trvl_expected = 1'bX;
	Trvl_expected = #999000 1'b0;
end 
// expected display[ 20 ]
initial
begin
	display_expected[20] = 1'bX;
end 
// expected display[ 19 ]
initial
begin
	display_expected[19] = 1'bX;
end 
// expected display[ 18 ]
initial
begin
	display_expected[18] = 1'bX;
end 
// expected display[ 17 ]
initial
begin
	display_expected[17] = 1'bX;
end 
// expected display[ 16 ]
initial
begin
	display_expected[16] = 1'bX;
end 
// expected display[ 15 ]
initial
begin
	display_expected[15] = 1'bX;
end 
// expected display[ 14 ]
initial
begin
	display_expected[14] = 1'bX;
end 
// expected display[ 13 ]
initial
begin
	display_expected[13] = 1'bX;
end 
// expected display[ 12 ]
initial
begin
	display_expected[12] = 1'bX;
end 
// expected display[ 11 ]
initial
begin
	display_expected[11] = 1'bX;
end 
// expected display[ 10 ]
initial
begin
	display_expected[10] = 1'bX;
end 
// expected display[ 9 ]
initial
begin
	display_expected[9] = 1'bX;
end 
// expected display[ 8 ]
initial
begin
	display_expected[8] = 1'bX;
end 
// expected display[ 7 ]
initial
begin
	display_expected[7] = 1'bX;
end 
// expected display[ 6 ]
initial
begin
	display_expected[6] = 1'bX;
end 
// expected display[ 5 ]
initial
begin
	display_expected[5] = 1'bX;
end 
// expected display[ 4 ]
initial
begin
	display_expected[4] = 1'bX;
end 
// expected display[ 3 ]
initial
begin
	display_expected[3] = 1'bX;
end 
// expected display[ 2 ]
initial
begin
	display_expected[2] = 1'bX;
end 
// expected display[ 1 ]
initial
begin
	display_expected[1] = 1'bX;
end 
// expected display[ 0 ]
initial
begin
	display_expected[0] = 1'bX;
end 
// expected inches[ 11 ]
initial
begin
	inches_expected[11] = 1'bX;
	inches_expected[11] = #999000 1'b0;
end 
// expected inches[ 10 ]
initial
begin
	inches_expected[10] = 1'bX;
	inches_expected[10] = #999000 1'b0;
end 
// expected inches[ 9 ]
initial
begin
	inches_expected[9] = 1'bX;
	inches_expected[9] = #999000 1'b0;
end 
// expected inches[ 8 ]
initial
begin
	inches_expected[8] = 1'bX;
	inches_expected[8] = #999000 1'b0;
end 
// expected inches[ 7 ]
initial
begin
	inches_expected[7] = 1'bX;
	inches_expected[7] = #999000 1'b0;
end 
// expected inches[ 6 ]
initial
begin
	inches_expected[6] = 1'bX;
	inches_expected[6] = #999000 1'b0;
end 
// expected inches[ 5 ]
initial
begin
	inches_expected[5] = 1'bX;
	inches_expected[5] = #999000 1'b0;
end 
// expected inches[ 4 ]
initial
begin
	inches_expected[4] = 1'bX;
	inches_expected[4] = #999000 1'b0;
end 
// expected inches[ 3 ]
initial
begin
	inches_expected[3] = 1'bX;
	inches_expected[3] = #999000 1'b0;
end 
// expected inches[ 2 ]
initial
begin
	inches_expected[2] = 1'bX;
	inches_expected[2] = #999000 1'b0;
end 
// expected inches[ 1 ]
initial
begin
	inches_expected[1] = 1'bX;
	inches_expected[1] = #999000 1'b0;
end 
// expected inches[ 0 ]
initial
begin
	inches_expected[0] = 1'bX;
	inches_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(FwdBck_expected or FwdBck or Trvl_expected or Trvl or display_expected or display or encCount_expected or encCount or inches_expected or inches)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FwdBck = %b | expected Trvl = %b | expected display = %b | expected encCount = %b | expected inches = %b | ",FwdBck_expected_prev,Trvl_expected_prev,display_expected_prev,encCount_expected_prev,inches_expected_prev);
	$display("| real FwdBck = %b | real Trvl = %b | real display = %b | real encCount = %b | real inches = %b | ",FwdBck_prev,Trvl_prev,display_prev,encCount_prev,inches_prev);
`endif
	if (
		( FwdBck_expected_prev !== 1'bx ) && ( FwdBck_prev !== FwdBck_expected_prev )
		&& ((FwdBck_expected_prev !== last_FwdBck_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FwdBck :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FwdBck_expected_prev);
		$display ("     Real value = %b", FwdBck_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FwdBck_exp = FwdBck_expected_prev;
	end
	if (
		( Trvl_expected_prev !== 1'bx ) && ( Trvl_prev !== Trvl_expected_prev )
		&& ((Trvl_expected_prev !== last_Trvl_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Trvl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Trvl_expected_prev);
		$display ("     Real value = %b", Trvl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Trvl_exp = Trvl_expected_prev;
	end
	if (
		( display_expected_prev[0] !== 1'bx ) && ( display_prev[0] !== display_expected_prev[0] )
		&& ((display_expected_prev[0] !== last_display_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[0] = display_expected_prev[0];
	end
	if (
		( display_expected_prev[1] !== 1'bx ) && ( display_prev[1] !== display_expected_prev[1] )
		&& ((display_expected_prev[1] !== last_display_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[1] = display_expected_prev[1];
	end
	if (
		( display_expected_prev[2] !== 1'bx ) && ( display_prev[2] !== display_expected_prev[2] )
		&& ((display_expected_prev[2] !== last_display_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[2] = display_expected_prev[2];
	end
	if (
		( display_expected_prev[3] !== 1'bx ) && ( display_prev[3] !== display_expected_prev[3] )
		&& ((display_expected_prev[3] !== last_display_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[3] = display_expected_prev[3];
	end
	if (
		( display_expected_prev[4] !== 1'bx ) && ( display_prev[4] !== display_expected_prev[4] )
		&& ((display_expected_prev[4] !== last_display_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[4] = display_expected_prev[4];
	end
	if (
		( display_expected_prev[5] !== 1'bx ) && ( display_prev[5] !== display_expected_prev[5] )
		&& ((display_expected_prev[5] !== last_display_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[5] = display_expected_prev[5];
	end
	if (
		( display_expected_prev[6] !== 1'bx ) && ( display_prev[6] !== display_expected_prev[6] )
		&& ((display_expected_prev[6] !== last_display_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[6] = display_expected_prev[6];
	end
	if (
		( display_expected_prev[7] !== 1'bx ) && ( display_prev[7] !== display_expected_prev[7] )
		&& ((display_expected_prev[7] !== last_display_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[7] = display_expected_prev[7];
	end
	if (
		( display_expected_prev[8] !== 1'bx ) && ( display_prev[8] !== display_expected_prev[8] )
		&& ((display_expected_prev[8] !== last_display_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[8] = display_expected_prev[8];
	end
	if (
		( display_expected_prev[9] !== 1'bx ) && ( display_prev[9] !== display_expected_prev[9] )
		&& ((display_expected_prev[9] !== last_display_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[9] = display_expected_prev[9];
	end
	if (
		( display_expected_prev[10] !== 1'bx ) && ( display_prev[10] !== display_expected_prev[10] )
		&& ((display_expected_prev[10] !== last_display_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[10] = display_expected_prev[10];
	end
	if (
		( display_expected_prev[11] !== 1'bx ) && ( display_prev[11] !== display_expected_prev[11] )
		&& ((display_expected_prev[11] !== last_display_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[11] = display_expected_prev[11];
	end
	if (
		( display_expected_prev[12] !== 1'bx ) && ( display_prev[12] !== display_expected_prev[12] )
		&& ((display_expected_prev[12] !== last_display_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[12] = display_expected_prev[12];
	end
	if (
		( display_expected_prev[13] !== 1'bx ) && ( display_prev[13] !== display_expected_prev[13] )
		&& ((display_expected_prev[13] !== last_display_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[13] = display_expected_prev[13];
	end
	if (
		( display_expected_prev[14] !== 1'bx ) && ( display_prev[14] !== display_expected_prev[14] )
		&& ((display_expected_prev[14] !== last_display_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[14] = display_expected_prev[14];
	end
	if (
		( display_expected_prev[15] !== 1'bx ) && ( display_prev[15] !== display_expected_prev[15] )
		&& ((display_expected_prev[15] !== last_display_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[15] = display_expected_prev[15];
	end
	if (
		( display_expected_prev[16] !== 1'bx ) && ( display_prev[16] !== display_expected_prev[16] )
		&& ((display_expected_prev[16] !== last_display_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[16] = display_expected_prev[16];
	end
	if (
		( display_expected_prev[17] !== 1'bx ) && ( display_prev[17] !== display_expected_prev[17] )
		&& ((display_expected_prev[17] !== last_display_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[17] = display_expected_prev[17];
	end
	if (
		( display_expected_prev[18] !== 1'bx ) && ( display_prev[18] !== display_expected_prev[18] )
		&& ((display_expected_prev[18] !== last_display_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[18] = display_expected_prev[18];
	end
	if (
		( display_expected_prev[19] !== 1'bx ) && ( display_prev[19] !== display_expected_prev[19] )
		&& ((display_expected_prev[19] !== last_display_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[19] = display_expected_prev[19];
	end
	if (
		( display_expected_prev[20] !== 1'bx ) && ( display_prev[20] !== display_expected_prev[20] )
		&& ((display_expected_prev[20] !== last_display_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_exp[20] = display_expected_prev[20];
	end
	if (
		( inches_expected_prev[0] !== 1'bx ) && ( inches_prev[0] !== inches_expected_prev[0] )
		&& ((inches_expected_prev[0] !== last_inches_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[0] = inches_expected_prev[0];
	end
	if (
		( inches_expected_prev[1] !== 1'bx ) && ( inches_prev[1] !== inches_expected_prev[1] )
		&& ((inches_expected_prev[1] !== last_inches_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[1] = inches_expected_prev[1];
	end
	if (
		( inches_expected_prev[2] !== 1'bx ) && ( inches_prev[2] !== inches_expected_prev[2] )
		&& ((inches_expected_prev[2] !== last_inches_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[2] = inches_expected_prev[2];
	end
	if (
		( inches_expected_prev[3] !== 1'bx ) && ( inches_prev[3] !== inches_expected_prev[3] )
		&& ((inches_expected_prev[3] !== last_inches_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[3] = inches_expected_prev[3];
	end
	if (
		( inches_expected_prev[4] !== 1'bx ) && ( inches_prev[4] !== inches_expected_prev[4] )
		&& ((inches_expected_prev[4] !== last_inches_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[4] = inches_expected_prev[4];
	end
	if (
		( inches_expected_prev[5] !== 1'bx ) && ( inches_prev[5] !== inches_expected_prev[5] )
		&& ((inches_expected_prev[5] !== last_inches_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[5] = inches_expected_prev[5];
	end
	if (
		( inches_expected_prev[6] !== 1'bx ) && ( inches_prev[6] !== inches_expected_prev[6] )
		&& ((inches_expected_prev[6] !== last_inches_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[6] = inches_expected_prev[6];
	end
	if (
		( inches_expected_prev[7] !== 1'bx ) && ( inches_prev[7] !== inches_expected_prev[7] )
		&& ((inches_expected_prev[7] !== last_inches_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[7] = inches_expected_prev[7];
	end
	if (
		( inches_expected_prev[8] !== 1'bx ) && ( inches_prev[8] !== inches_expected_prev[8] )
		&& ((inches_expected_prev[8] !== last_inches_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[8] = inches_expected_prev[8];
	end
	if (
		( inches_expected_prev[9] !== 1'bx ) && ( inches_prev[9] !== inches_expected_prev[9] )
		&& ((inches_expected_prev[9] !== last_inches_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[9] = inches_expected_prev[9];
	end
	if (
		( inches_expected_prev[10] !== 1'bx ) && ( inches_prev[10] !== inches_expected_prev[10] )
		&& ((inches_expected_prev[10] !== last_inches_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[10] = inches_expected_prev[10];
	end
	if (
		( inches_expected_prev[11] !== 1'bx ) && ( inches_prev[11] !== inches_expected_prev[11] )
		&& ((inches_expected_prev[11] !== last_inches_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inches[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inches_expected_prev);
		$display ("     Real value = %b", inches_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_inches_exp[11] = inches_expected_prev[11];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module QuadratureEncoderTop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg clk;
reg reset;
// wires                                               
wire FwdBck;
wire Trvl;
wire [20:0] display;
wire [25:0] encCount;
wire [11:0] inches;

wire sampler;                             

// assign statements (if any)                          
QuadratureEncoderTop i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.FwdBck(FwdBck),
	.Trvl(Trvl),
	.clk(clk),
	.display(display),
	.encCount(encCount),
	.inches(inches),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #320000 1'b1;
end 

// A
initial
begin
	repeat(17)
	begin
		A = 1'b0;
		A = #100000 1'b1;
		# 100000;
	end
	A = 1'b0;
	A = #100000 1'b1;
	A = #45000 1'b0;
	A = #100000 1'b1;
	# 100000;
	repeat(81)
	begin
		A = 1'b0;
		A = #100000 1'b1;
		# 100000;
	end
	A = 1'b0;
end 

// B
initial
begin
	B = 1'b1;
	# 25000;
	repeat(17)
	begin
		B = 1'b0;
		B = #100000 1'b1;
		# 100000;
	end
	B = 1'b0;
	B = #35000 1'b1;
	# 60000;
	repeat(82)
	begin
		B = 1'b0;
		B = #100000 1'b1;
		# 100000;
	end
	B = 1'b0;
end 

QuadratureEncoderTop_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

QuadratureEncoderTop_vlg_check_tst tb_out(
	.FwdBck(FwdBck),
	.Trvl(Trvl),
	.display(display),
	.encCount(encCount),
	.inches(inches),
	.sampler_rx(sampler)
);
endmodule

